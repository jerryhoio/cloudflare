// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/domains.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/domains.proto

It has these top-level messages:
	ListDomainsRequest
	ListDomainsResponse
	Domain
	GetDomainRecordsRequest
	GetDomainRecordsResponse
	DomainRecord
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Domains service

type DomainsService interface {
	List(ctx context.Context, in *ListDomainsRequest, opts ...client.CallOption) (*ListDomainsResponse, error)
	GetRecords(ctx context.Context, in *GetDomainRecordsRequest, opts ...client.CallOption) (*GetDomainRecordsResponse, error)
}

type domainsService struct {
	c    client.Client
	name string
}

func NewDomainsService(name string, c client.Client) DomainsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "io.jerryho.srv.cloudflare"
	}
	return &domainsService{
		c:    c,
		name: name,
	}
}

func (c *domainsService) List(ctx context.Context, in *ListDomainsRequest, opts ...client.CallOption) (*ListDomainsResponse, error) {
	req := c.c.NewRequest(c.name, "Domains.List", in)
	out := new(ListDomainsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsService) GetRecords(ctx context.Context, in *GetDomainRecordsRequest, opts ...client.CallOption) (*GetDomainRecordsResponse, error) {
	req := c.c.NewRequest(c.name, "Domains.GetRecords", in)
	out := new(GetDomainRecordsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Domains service

type DomainsHandler interface {
	List(context.Context, *ListDomainsRequest, *ListDomainsResponse) error
	GetRecords(context.Context, *GetDomainRecordsRequest, *GetDomainRecordsResponse) error
}

func RegisterDomainsHandler(s server.Server, hdlr DomainsHandler, opts ...server.HandlerOption) {
	type domains interface {
		List(ctx context.Context, in *ListDomainsRequest, out *ListDomainsResponse) error
		GetRecords(ctx context.Context, in *GetDomainRecordsRequest, out *GetDomainRecordsResponse) error
	}
	type Domains struct {
		domains
	}
	h := &domainsHandler{hdlr}
	s.Handle(s.NewHandler(&Domains{h}, opts...))
}

type domainsHandler struct {
	DomainsHandler
}

func (h *domainsHandler) List(ctx context.Context, in *ListDomainsRequest, out *ListDomainsResponse) error {
	return h.DomainsHandler.List(ctx, in, out)
}

func (h *domainsHandler) GetRecords(ctx context.Context, in *GetDomainRecordsRequest, out *GetDomainRecordsResponse) error {
	return h.DomainsHandler.GetRecords(ctx, in, out)
}
